#!/bin/bash
#
# run_with_timeout limit logfile command ...
#

#
# Return the IDs all processes descended from a given PID (inclusive)
#
proctree() {
  pid=$1

  children=$(ps --ppid $pid -o pid --no-headers)

  descendents=
  for child in $children; do
    descendents="$descendents $(proctree $child)"
  done
  parent=$(ps --pid $pid -o pid --no-headers)
  echo $parent $descendents
}

check_pid() {
  ps --pid $1 -o pid --no-headers
}

limit=$1
logfile=$2
shift 2

START=`date -u +%s`

echo $* > $logfile
$* >> $logfile 2>&1 &
PID=$!

NOW=`date -u +%s`
TIMEOUT=$(($START + $limit))
while [ \( "$(proctree $PID)" != "" \) -a \( $NOW -lt $TIMEOUT \) ]; do
  sleep 5
  NOW=`date -u +%s`
done

#set -x
PROCS=$(proctree $PID)
if [ "$PROCS" != "" ]; then
  #
  # timeout occurred - time to kill the offending process and its progeny
  #
  echo "TIMEOUT - terminating benchmark run" | tee /dev/stdout >> $logfile
  echo "Killing $PROCS" | tee /dev/stdout >> $logfile
  # kill $PROCS
  # sleep 5
  
  for try in 1 2 3 4 5 6 7 8 9 10; do
    for pid in $PROCS; do
      if [ $try > 5 ]; then SIG="-9"; else SIG=""; fi
      if [ "$(check_pid $pid)" != "" ]; then
        # no more "mr nice guy"
        echo "kill $SIG $pid" | tee /dev/stdout >> $logfile
        kill $SIG $pid
      fi
    done
    sleep 2
  done
  for pid in $PROCS; do
    if [ "$(check_pid $pid)" != "" ]; then
      echo "WARNING: Unable to kill $pid" | tee /dev/stdout >> $logfile
    fi
  done
fi

