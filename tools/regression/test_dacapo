#!/bin/bash
#
# Main driver for dacapo regression tests.  Runs all benchmarks at all sizes
# through all available JVMs, with 2 different scratch directories.
#
# $Date:$
# $Id:$
#

if [ -z "$BIN" ]; then
  . $(dirname $0)/config
fi

DATE=$1
VMS="$2"
BMS="$3"
SIZES="$4"

XVFB_RUN=${XVFB_RUN:-/usr/bin/xvfb-run -a}

if `echo $DATE | grep '\.' > /dev/null`; then
  DATE=$(echo $DATE | cut -f1 -d.)
fi

if [ "$VMS" == "" -o "$VMS" == "ALL" ]
then
  VMS=$ALL_VMS
fi

if [ "$BMS" == "" -o "$BMS" == "ALL" ]
then
  BMS=$ALL_BMS
fi

if [ "$SIZES" == "" -o "$SIZES" == "ALL" ]
then
  SIZES=$ALL_SIZES
fi

echo "Version: $DATE"
echo "VMs: $VMS"
echo "Benchmarks: $BMS"
echo "Sizes: $SIZES"

OUTDIR=results-$DATE
if [ -z "$RELEASE" ]; then
  JAR=dacapo-${DATE}.jar
else
  JAR=$RELEASE
fi

[ -e $OUTDIR ] || { mkdir $OUTDIR; }

#
# Timestamp this run.
#
date +%Y-%m-%d > $OUTDIR/timestamp


with_timeout() {
  limit=$1
  logfile=$2
  shift 2
  echo -n "."
  $BIN/run_with_timeout $limit $OUTDIR/$logfile $*
}

#
# Some benchmarks with some class libraries require an x-windows display
# This function determines a wrapper that provides it
#
display_wrapper() {
  local bm=$1
  local jvm=$2

  case $bm in
    chart|sunflow)
      case $jvm in
        JIKESRVM|CACAO|DRLVM)
          echo $XVFB_RUN
          ;;
      esac
      ;;
    batik) echo $XVFB_RUN 
      ;;
  esac
}

#
# Run the benchmarks:
# forall VMS
#   forall sizes
#     forall benchmarks
#       in 2 different scratch directories
#

OLD_PATH=$PATH
for vm in $VMS
do
  export PATH=$OLD_PATH
  case $vm in  
  JIKESRVM*)  JAVA_HOME=/opt/jdk1.5.0 ;;
  CACAO)  JAVA_HOME=$CACAO_HOME ;;
  DRLVM)     JAVA_HOME=$DRLVM_HOME ;;
  JROCKIT)   JAVA_HOME=/opt/jrockit-R27.2.0-jdk1.5.0_10 ;;
  JROCKIT16)   JAVA_HOME=/opt/jrockit-R27.2.0-jdk1.6.0 ;;
  SUN)       JAVA_HOME=/opt/jdk1.5.0 ;;
  JDK16)     JAVA_HOME=/opt/jdk1.6.0 ;;
  BLACKDOWN) JAVA_HOME=/usr/lib/j2se/1.4 ;;
  TOKYO) case `uname -m` in
         ppc*) JAVA_HOME=/opt/IBMJava2-ppc-142;;
         i*86) JAVA_HOME=/opt/IBMJava2-142;;
         esac
         ;;
  J9) case `uname -m` in
      ppc*) JAVA_HOME=/opt/ibm-java2-ppc-50 ;;
      i*86) JAVA_HOME=/opt/ibm-java2-i386-50 ;;
      esac
         ;; 
  esac

  case $vm in
    JIKESRVM*) JAVA=$RVM_ROOT/dist/${RVM_CONFIG}_${HOST_TYPE}/rvm ;;
    DRLVM) JAVA=$JAVA_HOME/jre/bin/java ;;
    CACAO) JAVA=$JAVA_HOME/bin/cacao ;;
    *) JAVA=$JAVA_HOME/bin/java;;
  esac
  export JAVA_HOME

  [ -e $OUTDIR/$vm ] || { mkdir $OUTDIR/$vm; }
  $JAVA -version &> $OUTDIR/$vm/version.txt

  for size in $SIZES
  do
    echo -n "$vm/$size: "

    #
    # Select the passes to perform
    #
    PASS_TMP=1
    PASS_DFLT=1
    PASS_PERF=0
    PASS_SMP=0
    case $size in
      small) ;;
      default)
        PASS_PERF=1
        ;;
      large)
        PASS_DFLT=0
        ;;
    esac

    # The SMP pass is a Jikes-only pass
    PASS_SMP=0
    case $vm in
      JIKESRVM-REPLAY)
        PASS_TMP=0
        PASS_DFLT=0
        PASS_SMP=0
        if [ $size = default ]; then
          PASS_PERF=1
        fi
        ;;
      JIKESRVM)
        if [ $size != large ]; then
          PASS_SMP=1
        fi
        ;;
    esac

    for bm in $BMS
    do
      echo -n "$bm"
      VMFLAGS=
      #
      # Set benchmark-specific options
      #
      case $bm in
        antlr)   
		if [ $HACK_BOOTCLASSPATH = "true" ]; then
		    case $vm in
                        DRLVM) VMFLAGS="-Xbootclasspath/p:$BIN/antlr.jar" 
		               ;;
                    esac 
                fi ;;
        hsqldb)  HEAP=768 ;;
        xalan)   
		if [ $HACK_BOOTCLASSPATH = "true" ]; then
                   case $vm in
                     J9|TOKYO|DRLVM)
                       jar xf $JAR xalan.jar 
                       VMFLAGS="-Xbootclasspath/p:xalan.jar" ;;
                   esac
                fi ;;
        eclipse) if [ $vm == "JIKESRVM" ]; then
                   VMFLAGS="-Declipse.java.home=$JAVA_HOME"
                 fi ;;
      esac
      DISPLAY_WRAPPER=$(display_wrapper $bm $vm)
      
      DFLAGS="-s $size -n 2"
      HEAP_PERF=$(( `$BIN/min_heap_size $bm` * 3 ))
      HEAP_FAST=512
      HEAPFLAGS_FAST="-Xmx${HEAP_FAST}m -Xms${HEAP_FAST}m"
      HEAPFLAGS_PERF="-Xmx${HEAP_PERF}m -Xms${HEAP_PERF}m"
      
      # Run with an absolute scratch directory
      if [ $PASS_TMP = 1 ]; then
        with_timeout 1200 $vm/$bm.$size.tmp.log $DISPLAY_WRAPPER \
	  $JAVA $VMFLAGS $HEAPFLAGS_FAST \
          -jar $JAR $DFLAGS -scratch /tmp/$$ $bm
        if [ -e /tmp/$$ ]; then
          rm -rf /tmp/$$
        fi
      fi

      # Relative scratch directory
      if [ $PASS_DFLT = 1 ]; then
        with_timeout 1200 $vm/$bm.$size.log $DISPLAY_WRAPPER \
	  $JAVA $VMFLAGS $HEAPFLAGS_FAST \
          -jar $JAR $DFLAGS $bm
      fi

      #
      # VM-specific tests
      #
      if [ $PASS_SMP = 1 ]; then
          if [ $vm = JIKESRVM ]; then
            SMPFLAG="-X:processors=all"
          fi
          with_timeout 1200 $vm/$bm.$size.2proc.log $DISPLAY_WRAPPER \
            $JAVA $VMFLAGS $SMPFLAG $HEAPFLAGS_FAST -jar $JAR $DFLAGS $bm
      fi

      #
      # Performance run for default workload - do 3 iterations
      #
      if [ $PASS_PERF = 1 ]; then
        DFLAGS="-s $size -n 3"
        if [ "$vm" = "JIKESRVM" ]; then
          VMFLAGS="$VMFLAGS -X:processors=2"
        fi
        if [ "$vm" = "DRLVM" -o "$vm" = "SUN" -o "$vm" = "JDK16" -o "$vm" = "JROCKIT" ]; then
          VMFLAGS="$VMFLAGS -server"
        elif [ $vm = JIKESRVM-REPLAY ]; then
          VMFLAGS="$VMFLAGS -X:aos:enable_replay_compile=true"
          VMFLAGS="$VMFLAGS -X:aos:cafi=$ADVICEDIR/$bm.ca"
          VMFLAGS="$VMFLAGS -X:aos:dcfi=$ADVICEDIR/$bm.dc"
          VMFLAGS="$VMFLAGS -X:vm:edgeCounterFile=$ADVICEDIR/$bm.ec"
        fi
        with_timeout 1800 $vm/$bm.$size.perf.log $DISPLAY_WRAPPER \
          $JAVA $VMFLAGS $HEAPFLAGS_PERF \
          -jar $JAR $DFLAGS $bm
      fi
      echo -n " "
    done
  done
  echo "...complete, publishing results"
  $BIN/test_dacapo_results results-$DATE
done
