<!--
 * Ant build file for the DaCapo benchmark suite.
 *       
 * Public targets are 
 * - dist (default) compile from source and create the dacapo jar file. 
 * - sourcedist     download sources and build 
 * - sources        download the sources from the 'net, if they are available.
 * - srczip         create source zip file
 * - clean          remove files generated buring the build process
 * - distclean      remove files generated buring the build process, 
 *                  including the 'results'
 * - sourceclean    remove all distribution files, and all downloadable
 *                  sources.  This prepares an "ip-clean" distribution.
 * - depzip         generate a zip file containing two jars for every benchmark,
 *                  <bm>.jar and <bm>-deps.jar, containing the core of the
 *                  benchmark and its external dependencies respectively
 * - split-deps     use this target in combination with any of the others
 *                  to force external dependencies to be separated and placed
 *                  into a second generated jar file.
 * - release        create main jar, srczip and depzip, each appropriately named
 *                  according to the property "release.tag", so must be called
 *                  in conjunction with -Drelease.tag="<some-release-id-string>"
 *                  on the command line
 * - <bmname>       will compile a given benchmark
 * - compile        will compile all benchmarks
 * - jar.quick      will build a jar (undated) based on whatever has been compiled already
 * - jar.date       will build a dated jar based on whatever has been compiled already
 *
 * Therefore, individual benchmarks can be built into a jar using the
 * benchmark name (note that lucene covers both lusearch and luindex),
 * and the jar.quick or jar.date targets, which will create a jar with
 * no other dependencies.  For example:
 * - antlr jar.quick  creates a jar which can run the antlr benchmark (only)
 *       
 * External tools required (apart from a JDK and Ant)
 *   - make
 *   - javacc, assumed to be on the path, with library files in 
 *     /usr/share/javacc/lib
 *   
 *   Author: Robin Garner, Australian National University
 *   $Date$
 *   $Id$
-->

<project name="DacapoBenchmarks" default="dist" basedir=".">
    <description>Dacapo benchmarks</description>

	<property file="ant/user.properties"/>
 	<property file="ant/dacapo.properties"/>

    <!-- BEGIN PUBLIC TARGETS -->

    <!-- ================================= 
         target: dist              
         ================================= -->
    <target name="dist" depends="jar" description="--> Build the distribution from source"/>

    <!-- ================================= 
         target: sourcedist              
         ================================= -->
    <target name="sourcedist" depends="sources,dist" description="--> Download the source and then build"/>

    <!-- ================================= 
         target: sources          
         ================================= -->
    <target name="sources" 
      description="Download sources from their original locations"
      depends="init.sources,ant.source,eclipse.source">
    	<ant antfile="${ant.dir}/antlr.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/batik.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/bloat.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/chart.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/derby.xml" target="source" inheritAll="true"/>
    	<ant antfile="${ant.dir}/fop.xml" target="source" inheritAll="true"/>
    	<ant antfile="${ant.dir}/hsqldb.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/jython.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/janino.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/lucene.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/pmd.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/sunflow.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/xalan.xml" target="source" inheritAll="true"/>
        <ant antfile="${ant.dir}/xerces.xml" target="source" inheritAll="true"/>
    </target>

    <!-- ================================= 
         target: srczip              
         ================================= -->
    <target name="srczip" depends="clean,init" description="--> Creates a source zip">
        <antcall target="srczip.basic">
            <param name="zip.suffix" value=""/>
            <param name="zip.basename" value="dacapo"/>
        </antcall>
    </target>

    <!-- ================================= 
         target: clean              
         ================================= -->
    <target name="clean" description="clean up after the build process">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${build}"/>
            <fileset dir="${build.src}"/>
            <fileset dir="${build.deps}"/>
            <fileset dir="${extra}/eclipse-plugin/@dot"/>
            <fileset dir="cachedir"/>
            <fileset dir="${dep.tmp}"/>
            <fileset dir="scratch"/>
        </delete>
    </target>

    <!-- ================================= 
         target: distclean              
         ================================= -->
    <target name="distclean" depends="clean"
          description="clean up including the resulting jar files">
        <delete dir="bin"/>
        <delete>
            <fileset dir="${basedir}">
                <include name="dacapo*.jar"/>
            </fileset>
        </delete>
    </target>

    <!-- ================================= 
          target: sourceclean              
         ================================= -->
    <target name="sourceclean" depends="distclean" 
            description="--> Delete all downloadable sources, too">
        <delete dir="${sources}"/>
    </target>

    <!-- ================================= 
         target: depzip        
         ================================= -->
    <target name="depzip" description="--> Create a zip file containing two jar files for each benchmark; one containing the benchmark, the other containing its dependencies">
        <antcall target="depzip.basic">
            <param name="zip.suffix" value=""/>
            <param name="zip.basename" value="dacapo"/>
        </antcall>
    </target>

    <!-- ================================= 
         target: split-deps        
         ================================= -->
    <target name="split-deps" description="--> Split the distribution into a core jar and a jar containting dependencies">
        <property name="externalize.deps" value="true"/>
    </target>

    <!-- ================================= 
          target: release              
         ================================= -->
    <target name="release" depends="srczip.release,jar.release,depzip.release" 
            description="--> Perform full clean, download, and then create all files necessary for a release">
    </target>

    <!-- ================================= 
         target: jar              
         ================================= -->
    <target name="jar" depends="compile,jar.date" description="generate the distribution jar file"/>

    <!-- ================================= 
         target: jar.quick            
         ================================= -->
    <target name="jar.quick" depends="harness,init" description="generate a jar file" >
        <antcall target="jar.basic">
            <param name="jar.suffix" value=""/>
            <param name="jar.basename" value="dacapo"/>
            <param name="jar.subdir" value="."/>
        </antcall>
    </target>

    <!-- ================================= 
         target: jar.date          
         ================================= -->
    <target name="jar.date" depends="harness,init" description="generate a jar file" >
        <antcall target="jar.basic">
            <param name="jar.suffix" value="-${DSTAMP}"/>
            <param name="jar.basename" value="dacapo"/>
            <param name="jar.subdir" value="."/>
        </antcall>
    </target>

    <!-- END PUBLIC TARGETS -->


    <!-- internal directory structure -->
    <property name="prune" location="prune"/>

    <!-- constraints -->
    <property name="constraints.gnuclasspath" value="true"/>

    <!-- benchmark versions -->
    <property name="eclipse.version" value="3.1.2"/>
    <property name="eclipse.drop" value="200601181600"/>
    <!-- auxilary downloads -->
    <property name="ant.dl.version" value="1.6.5"/>

    <!-- benchmark locations -->

    <property name="eclipse.url" value="http://archive.eclipse.org/eclipse/downloads/drops/R-${eclipse.version}-${eclipse.drop}"/>
    <!-- auxilary downloads -->
    <property name="ant.url" value="${apache.dl.url}/ant/binaries/"/>
    <!-- data downloads -->
    <property name="shakespeare.xml.url" value="http://metalab.unc.edu/bosak/xml/eg/shaks200.zip"/>


    <!-- ================================= 
         target: initialize directory structures
         ================================= -->
    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <mkdir dir="${build.src}"/>
        <mkdir dir="${build.deps}"/>
        <mkdir dir="${build}/cnf"/>
        <mkdir dir="${zipdata}"/>
        <mkdir dir="${dep.tmp}"/>
    </target>

    <!-- ================================= 
         target: source           
         ================================= -->
    <target name="source" depends="init" description="add source to build">
        <copy todir="${build}">
            <fileset dir="${src}" includes="**/*.java"/>
            <fileset dir="${bmsrc}" includes="**/*.java"/>
        </copy>
    </target>

    <!-- ================================= 
         target: compile  all sources
         ================================= -->
    <target name="compile" depends="antlr,batik,bloat,derby,eclipse,fop,hsqldb,jython,lucene,pmd,sunflow,xalan"
          description="compile the sources for all benchmarks" >
    	<antcall target="chart"/>
    </target>

    <!-- ================================= 
         target: harness           
         ================================= -->
    <target name="harness" depends="init" description="compile the source ">
        <javacc javacchome="${javacchome}" target="${src}/dacapo/parser/ConfigFile.jj"/>
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${src}" destdir="${build}"
               debug="true" debuglevel="lines,vars,source"/>
        <!-- Test data and configuration files -->
        <copy todir="${build}/cnf">
            <fileset dir="${config}"/>
        </copy>
    </target>

    <!-- ================================= 
         target: bms          
         ================================= -->
    <target name="bms" depends="compile" description="compile the benchmarks">
        <!-- Compile the java code from ${src} into ${build} -->
        <javac srcdir="${bmsrc}" destdir="${build}" 
               debug="true" debuglevel="lines,vars,source"/>

    </target>

    <!-- ================================= 
         target: jar.release            
         ================================= -->
    <target name="jar.release" depends="compile,harness,init" description="generate a jar file" >
        <antcall target="jar.basic">
            <param name="jar.suffix" value="-${release.tag}"/>
            <param name="jar.basename" value="dacapo"/>
            <param name="jar.subdir" value="."/>
        </antcall>
    </target>

    <!-- ================================= 
         target: srczip.release              
         ================================= -->
    <target name="srczip.release" depends="clean,init,sources" description="--> Creates a source zip">
        <antcall target="srczip.basic">
            <param name="zip.suffix" value="-${release.tag}"/>
            <param name="zip.basename" value="dacapo"/>
        </antcall>
    </target>

    <!-- ================================= 
         target: depzip.release        
         ================================= -->
    <target name="depzip.release" description="--> Create a zip file containing two jar files for each benchmark; one containing the benchmark, the other containing its dependencies">
        <antcall target="depzip.basic">
            <param name="zip.suffix" value="-${release.tag}"/>
            <param name="zip.basename" value="dacapo"/>
        </antcall>
    </target>

    <!-- ================================= 
         target: jar.basic            
         ================================= -->
    <target name="jar.basic" depends="harness,init" description="generate a jar file with suffix (may be null)" >
        <antcall target="meta-inf">
            <param name="jarroot" value="${build}"/>
        </antcall>

        <!-- Put everything in ${build} into the dacapo${jar.suffix}.jar file -->
        <jar jarfile="${jar.subdir}/${jar.basename}${jar.suffix}.jar" basedir="${build}" index="true" manifest="${build}/META-INF/MANIFEST.MF"/>
        <antcall target="jar.deps"/>
    </target>

    <!-- ================================= 
         target: jar.deps           
         ================================= -->
    <target name="jar.deps" if="externalize.deps" depends="harness,init" description="generate a jar file with suffix (may be null)" >
        <!-- Put everything in ${build.deps} into the MyProject-build-deps${jar.suffix}.jar file -->
        <jar jarfile="${jar.subdir}/${jar.basename}-deps${jar.suffix}.jar" basedir="${build.deps}" index="true" />
    </target>

    <!-- ================================= 
         target: srczip.basic           
         ================================= -->
    <target name="srczip.basic" depends="clean,init" description="--> Creates a source zip">
        <zip destfile="${zip.basename}${zip.suffix}-src.zip">
            <fileset dir=".." includes="extra/eclipse-plugin/*" excludes="**/CVS"/>
            <fileset dir=".." includes="extra/eclipse-plugin/src/**" excludes="**/CVS"/>
            <fileset dir=".." includes="extra/eclipse-plugin/META-INF/**" excludes="**/CVS"/>
            <fileset dir=".." includes="benchmarks/LICENSE-2.0.txt"/>
            <fileset dir=".." includes="benchmarks/README.txt"/>
            <fileset dir=".." includes="benchmarks/bmsrc/**" excludes="**/CVS"/>
            <fileset dir=".." includes="benchmarks/build.xml"/>
            <fileset dir=".." includes="benchmarks/cnf/**" excludes="**/CVS"/>
            <fileset dir=".." includes="benchmarks/data/**" excludes="**/CVS"/>
            <fileset dir=".." includes="benchmarks/patches/**" excludes="**/CVS"/>
            <fileset dir=".." includes="benchmarks/src/**" excludes="**/CVS"/>
        </zip>
    </target>


    <!-- ================================= 
         target: depzip.basic        
         ================================= -->
    <target name="depzip.basic" depends="dep.jars" description="--> Create a zip file containing two jar files for each benchmark; one containing the benchmark, the other containing its dependencies">
        <zip basedir="${dep.tmp}" includes="**" destfile="${zip.basename}${zip.suffix}-xdeps.zip"/>
    </target>

    <!-- ================================= 
         target: dep.jars        
         ================================= -->
    <target name="dep.jars" description="--> Create two jar files for each benchmark; one containing the benchmark, the other containing its dependencies">
        <antcall target="dep.jar">
            <param name="bm" value="antlr" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="batik" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="bloat" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="chart" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="derby" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="eclipse" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="fop" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="hsqldb" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="jython" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="luindex" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="lusearch" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="pmd" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="sunflow" />
        </antcall>
        <antcall target="dep.jar">
            <param name="bm" value="xalan" />
        </antcall>
    </target>

    <!-- ================================= 
         target: dep.jar     
         ================================= -->
    <target name="dep.jar" depends="split-deps" description="--> Create two jar files for each benchmark; one containing the benchmark, the other containing its dependencies">
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${build}"/>
            <fileset dir="${build.deps}"/>
        </delete>
        <antcall target="${bm}"/>
        <antcall target="jar.basic">
            <param name="jar.basename" value="${bm}" />
            <param name="jar.suffix" value="" />
            <param name="jar.subdir" value="${dep.tmp}" />
        </antcall>
    </target>

    <!-- ================================= 
         target: meta-inf             
         ================================= -->
    <target name="meta-inf" depends="init" description="meta-inf for jars" >
        <copy todir="${jarroot}/META-INF" overwrite="true">
            <fileset dir="${src}/META-INF"/>
        </copy>
    </target>

    <!-- *************************************************************************** -->
    <!--                        Fetch sources                                        -->
    <!-- *************************************************************************** -->

    <target name="init.sources" description="Prepare to download sources">
        <mkdir dir="${sources}"/>
    </target>

    <target name="ant.source" depends="init.sources">
        <get dest="${sources}/apache-ant-${ant.dl.version}-bin.zip"
         src="${ant.url}/apache-ant-${ant.dl.version}-bin.zip"
       usetimestamp="true"/>
    </target>

    <target name="eclipse.source" depends="init.sources">
        <get src="${eclipse.url}/eclipse-SDK-${eclipse.version}-linux-gtk.tar.gz"
         dest="${sources}/eclipse-SDK-${eclipse.version}-linux.gtk.tar.gz"
         usetimestamp="true"/>
        <get src="${eclipse.url}/eclipse-Automated-Tests-${eclipse.version}.zip"
         dest="${sources}/eclipse-Automated-Tests-${eclipse.version}.zip"
         usetimestamp="true"/>
    </target>

    <!-- *************************************************************************** -->
    <!--                            Build                                            -->
    <!-- *************************************************************************** -->

    <!-- ================================= 
          target: ant            
       ================================= -->
    <target name="ant" description="--> The ant library - required by some other benchmarks">
        <!-- Install the ant jar file -->
        <unzip src="${sources}/apache-ant-${ant.dl.version}-bin.zip" dest="${build.src}/ant/">
            <patternset>
                <include name="apache-ant-${ant.dl.version}/lib/ant.jar"/>
                <include name="apache-ant-${ant.dl.version}/lib/ant-launcher.jar"/>
            </patternset>
        </unzip>
        <move file="${build.src}/ant/apache-ant-${ant.dl.version}/lib/ant.jar" tofile="${build.src}/ant/ant.jar"/>
        <move file="${build.src}/ant/apache-ant-${ant.dl.version}/lib/ant-launcher.jar" tofile="${build.src}/ant/ant-launcher.jar"/>
    </target>

    <!-- ================================= 
        target: antlr 
       ================================= -->
    <target name="antlr" depends="init,harness" description="--> build the antlr benchmark">
    	<ant antfile="${ant.dir}/antlr.xml" target="build" inheritAll="true"/>
    </target>
	
    <!-- ================================= 
        target: batik 
       ================================= -->
    <target name="batik" depends="init,harness" description="Build batik">
    	<ant antfile="${ant.dir}/batik.xml" target="build" inheritAll="true"/>
    </target>

    <!-- ================================= 
         target: bloat 
         ================================= -->
    <target name="bloat" depends="init,harness" description="Build bloat">
    	<ant antfile="${ant.dir}/bloat.xml" target="build" inheritAll="true"/>
    </target>


    <!-- ================================= 
          target: chart              
         ================================= -->
    <target name="chart" depends="init,harness" description="--> build the jFreeChart benchmark">
    	<ant antfile="${ant.dir}/chart.xml" target="build" inheritAll="true"/>
    </target>	

	
    <!-- ================================= 
          target: derby              
         ================================= -->
    <target name="derby" depends="init,harness" description="--> build the derby benchmark">
    	<ant antfile="${ant.dir}/derby.xml" target="build" inheritAll="true"/>
	</target>	


    <!-- ================================= 
          target: eclipse              
         ================================= -->
    <target name="eclipse" depends="eclipse.data,eclipse.harness" description="--> build the eclipse benchmark"/>

    <!-- Build the eclipse dacapo harness -->
    <target name="eclipse.harness" depends="init,harness" description="--> build the eclipse harness">
        <javac     srcdir="${bmsrc}" 
            source="1.4"
                destdir="${build}" includes="dacapo/eclipse/*.java"
                debug="true" debuglevel="lines,vars,source">
            <classpath>
                <pathelement path="${build}"/>
                <pathelement path="${build.src}/eclipse/eclipse/plugins/org.eclipse.osgi_${eclipse.version}.jar"/>
                <pathelement path="${build.src}/eclipse/eclipse/plugins/org.eclipse.core.runtime_${eclipse.version}.jar"/>
                <pathelement path="${build.src}/eclipse/eclipse/plugins/org.eclipse.jdt.launching_3.1.0.jar"/>
            </classpath>
        </javac>
    </target>

    <!-- Build the eclipse benchmark -->
    <target name="eclipse.benchmark" depends="init" description="--> build the eclipse benchmark">
        <property name="eclipse-top" value="${build.src}/eclipse/eclipse"/>

        <untar src="${sources}/eclipse-SDK-${eclipse.version}-linux.gtk.tar.gz" dest="${build.src}/eclipse/" compression="gzip"/>
        <unzip src="${sources}/eclipse-Automated-Tests-${eclipse.version}.zip" dest="${build.src}/eclipse/">
            <patternset>
                <include name="eclipse-testing/eclipse-junit-tests-M*.zip"/>
            </patternset>
        </unzip>
        <unzip dest="${build.src}/eclipse/">
            <fileset dir="${build.src}/eclipse/eclipse-testing/">
                <include name="eclipse-junit-tests-M*.zip"/>
            </fileset>
        </unzip>
        <delete dir="${build.src}/eclipse/eclipse-testing"/>
    </target>

    <!-- build the eclipse plugin, which is necessary to fire up eclipse from within our harness -->
    <target name="eclipse.plugin" depends="eclipse.benchmark,eclipse.harness" description="--> build the eclipse harness">
        <ant antfile="build.xml" dir="${extra}/eclipse-plugin" 
         target="build.update.jar" inheritall="false">
            <property name="eclipsesrc.home" location="${eclipse-top}"/>
            <property name="harness.home" location="${build}"/>
            <property name="plugin.destination" location="${eclipse-top}/plugins/"/>
        </ant>
    </target>

    <!-- only delete the directories if not constrained by Jikes RVM -->
    <target name="eclipse.clearosgi" unless="constraints.jikesrvm">
        <delete dir="${osgihack}/org"/>
    </target>

    <!-- gut org.eclipse.osgi_XXXX.jar of its classes, which will become part of the main jar -->
    <target name="eclipse.osgiclasses" depends="eclipse.benchmark">
        <property name="osgihack" value="${build.src}/eclipse/osgihack"/>
        <!-- unzip the jar -->
        <unzip dest="${osgihack}" src="${eclipse-top}/plugins/org.eclipse.osgi_${eclipse.version}.jar"/>
        <!-- copy out the class files -->
        <copy todir="${build}">
            <fileset dir="${osgihack}" includes="org/**/*"/>
        </copy>
        <!-- conditionally clean out the stuff we've duplicated -->
        <!--    <antcall target="eclipse.clearosgi"/> -->
        <delete dir="${osgihack}/org"/>
        <!-- jar up the remainder -->
        <zip basedir="${osgihack}" includes="**/*" destfile="${eclipse-top}/plugins/org.eclipse.osgi_${eclipse.version}.jar"/>
        <delete dir="${osgihack}"/>
    </target>

    <!-- Create the eclipse data file -->
    <target name="eclipse.data" depends="eclipse.benchmark,eclipse.plugin,eclipse.osgiclasses" description="--> build the eclipse data file">
        <!-- Create the fake jre -->
        <unzip dest="${build.src}/eclipse/dummyjre" src="${data}/eclipse/dummyjre.zip"/>

        <!-- Install the test data -->
        <zip destfile="${zipdata}/eclipse.zip">
            <!-- The dummy jre -->
            <fileset dir="${build.src}/eclipse/" includes="dummyjre/**"/>

            <!-- The eclipse runtime.  We just include as little as we can, -->
            <!-- using an empirically derived list of what we really need.  -->
            <fileset dir="${build.src}/eclipse/" includes="eclipse/*"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/about_files/**"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/configuration/**"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/features/**"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/readme/**"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/dacapo.eclipse_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.apache.ant_*/**"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.core.expressions_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.core.resources_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.core.runtime.compatibility_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.core.runtime_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.core.variables_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.debug.core_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.core.tests.builder_*/**"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.core.tests.compiler_*/**"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.core.tests.performance_*/**"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.core_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.launching_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.jdt.debug_*/**"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.osgi_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.test.performance_*/**"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.text_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.eclipse.update.configurator_*.jar"/>
            <fileset dir="${build.src}/eclipse/" includes="eclipse/plugins/org.junit_*/**"/>
        </zip>
    </target>
	
    <!-- ================================= 
        target: fop 
       ================================= -->
    <target name="fop" depends="init,harness" description="--> build the fop benchmark">
    	<ant antfile="${ant.dir}/fop.xml" target="build" inheritAll="true"/>
    </target>
	
    <!-- ================================= 
          target: hsqldb              
       ================================= -->
    <target name="hsqldb" depends="init,harness" description="--> build the hsqldb benchmark">
    	<ant antfile="${ant.dir}/hsqldb.xml" target="build" inheritAll="true"/>
	</target>	

    <!-- ================================= 
          target: jython                
         ================================= -->
    <target name="jython" depends="init,harness,ant" description="--> build the jython benchmark">
		<ant antfile="${ant.dir}/jython.xml" target="build" inheritAll="true"/>
	</target>

    <!-- ================================= 
          target: luindex    
         ================================= -->
    <target name="luindex" depends="lucene"/>

    <!-- ================================= 
          target: lusearch   
         ================================= -->
    <target name="lusearch" depends="lucene"/>

    <!-- ================================= 
          target: lucene    
         ================================= -->
    <target name="lucene" depends="init, harness" description="--> build the lucene benchmark">
        <ant antfile="${ant.dir}/lucene.xml" target="build" inheritAll="true"/>
	</target>

    <!-- ================================= 
          target: pmd    
         ================================= -->
    <target name="pmd" depends="init,harness" description="--> build the pmd benchmark">
		<ant antfile="${ant.dir}/pmd.xml" target="build"/>
    </target>

    <!-- ================================= 
          target: sunflow  
         ================================= -->
    <target name="sunflow" depends="init,harness" description="--> build the sunflow benchmark">
		<ant antfile="${ant.dir}/sunflow.xml" target="build"/>
    </target>

    <!-- ================================= 
        target: xalan
       ================================= -->
    <target name="xalan" depends="init,harness" description="--> build the xalan benchmark">
		<ant antfile="${ant.dir}/xalan.xml" target="build"/>
    </target>	
</project>
