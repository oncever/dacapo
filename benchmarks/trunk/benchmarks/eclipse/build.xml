<project name="eclipse" default="all" basedir="..">
    <description>DaCapo eclipse benchmark</description>
	<property file="ant/dacapo.properties"/>
	
	<property name="bm-name" value="eclipse"/>
    <property name="bm-version" value="3.1.2"/>
    <property name="bm-drop" value="200601181600"/>
    <property name="bm-url" value="http://archive.eclipse.org/eclipse/downloads/drops/R-${bm-version}-${bm-drop}"/>
	<property name="bm-src" value="eclipse-SDK-${bm-version}-linux-gtk.tar.gz"/>
	
    <import file="../common.xml"/>

	<property name="eclipse-top" value="${bm-build-dir}/eclipse"/>
	<property name="bm-src-at" value="eclipse-Automated-Tests-${bm-version}.zip"/>

    <target name="source" depends="common.source">
        <get src="${bm-url}/${bm-src-at}" dest="${sources}/${bm-src-at}" usetimestamp="true"/>
    </target>
    
    <target name="harness">
        <javac srcdir="${bmsrc}" destdir="${build}" includes="dacapo/${bm-name}/*.java"
                debug="true" debuglevel="lines,vars,source">
            <classpath>
                <pathelement path="${build}"/>
                <pathelement path="${bm-build-dir}/eclipse/plugins/org.eclipse.osgi_${bm-version}.jar"/>
                <pathelement path="${bm-build-dir}/eclipse/plugins/org.eclipse.core.runtime_${bm-version}.jar"/>
                <pathelement path="${bm-build-dir}/eclipse/plugins/org.eclipse.jdt.launching_3.1.0.jar"/>
            </classpath>
        </javac>
    </target>
    
	<target name="bm-build" depends="bm-untar"> 
		<unzip src="${sources}/${bm-src-at}" dest="${bm-build-dir}">
			<patternset>
				<include name="eclipse-testing/eclipse-junit-tests-M*.zip"/>
			</patternset>
		</unzip>
		<unzip dest="${bm-build-dir}">
			<fileset dir="${bm-build-dir}/eclipse-testing/">
				<include name="eclipse-junit-tests-M*.zip"/>
			</fileset>
		</unzip>
		<delete dir="${bm-build-dir}/eclipse-testing"/> 
	</target>

	<!-- gut org.eclipse.osgi_XXXX.jar of its classes, which will become part of the main jar -->
    <target name="bm-jar">
        <property name="osgihack" value="${bm-build-dir}/osgihack"/>
        <!-- unzip the jar -->
        <unzip dest="${osgihack}" src="${eclipse-top}/plugins/org.eclipse.osgi_${bm-version}.jar"/>
        <!-- copy out the class files -->
       	<jar jarfile="${jars}/eclipse.jar">
            <fileset dir="${osgihack}" includes="org/**/*"/>
        </jar>
        <!-- conditionally clean out the stuff we've duplicated -->
        <!--    <antcall target="eclipse.clearosgi"/> -->
        <delete dir="${osgihack}/org"/>
        <!-- jar up the remainder -->
        <zip basedir="${osgihack}" includes="**/*" destfile="${eclipse-top}/plugins/org.eclipse.osgi_${bm-version}.jar"/>
        <delete dir="${osgihack}"/>
    </target>
	

    <!-- build the eclipse plugin, which is necessary to fire up eclipse from within our harness -->
    <target name="plugin">
        <ant antfile="build.xml" dir="${extra}/eclipse-plugin" 
         target="build.update.jar" inheritall="false">
            <property name="eclipsesrc.home" location="${eclipse-top}"/>
            <property name="harness.home" location="${build}"/>
            <property name="plugin.destination" location="${eclipse-top}/plugins/"/>
        </ant>
    </target>
	
    <!-- Create the eclipse data file -->
	<target name="bm-data" depends="plugin">
		<!-- Create the fake jre -->
	    <unzip dest="${bm-build-dir}/dummyjre" src="${data}/${bm-name}/dummyjre.zip"/>

	    <!-- Install the test data -->
	    <zip destfile="${zipdata}/${bm-name}.zip">
	    	<!-- The dummy jre -->
	        <fileset dir="${bm-build-dir}/" includes="dummyjre/**"/>

	        <!-- The eclipse runtime.  We just include as little as we can, -->
	        <!-- using an empirically derived list of what we really need.  -->
	        <fileset dir="${bm-build-dir}" includes="eclipse/*"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/about_files/**"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/configuration/**"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/features/**"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/readme/**"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/dacapo.eclipse_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.apache.ant_*/**"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.core.expressions_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.core.resources_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.core.runtime.compatibility_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.core.runtime_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.core.variables_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.debug.core_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.jdt.core.tests.builder_*/**"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.jdt.core.tests.compiler_*/**"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.jdt.core.tests.performance_*/**"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.jdt.core_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.jdt.launching_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.jdt.debug_*/**"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.osgi_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.test.performance_*/**"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.text_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.eclipse.update.configurator_*.jar"/>
	        <fileset dir="${bm-build-dir}" includes="eclipse/plugins/org.junit_*/**"/>
	    </zip>
	</target>
</project>
