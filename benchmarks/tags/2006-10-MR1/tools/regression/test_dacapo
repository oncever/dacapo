#!/bin/bash
#
# Main driver for dacapo regression tests.  Runs all benchmarks at all sizes
# through all available JVMs, with 2 different scratch directories.
#
# $Date:$
# $Id:$
#

if [ -z "$BIN" ]; then
  . $(dirname $0)/config
fi

VERSION=$1
VMS="$2"
BMS="$3"
SIZES="$4"

if `echo $VERSION | grep '\.' > /dev/null`; then
  VERSION=$(echo $VERSION | cut -f1 -d.)
fi

if [ "$VMS" == "" -o "$VMS" == "ALL" ]
then
  VMS=$ALL_VMS
fi

if [ "$BMS" == "" -o "$BMS" == "ALL" ]
then
  BMS=$ALL_BMS
fi

if [ "$SIZES" == "" -o "$SIZES" == "ALL" ]
then
  SIZES=$ALL_SIZES
fi

OUTDIR=results-$VERSION
JAR=dacapo-${VERSION}.jar

[ -e $OUTDIR ] || { mkdir $OUTDIR; }

#
# Timestamp this run.
#
date +%Y-%m-%d > $OUTDIR/timestamp


with_timeout() {
  limit=$1
  logfile=$2
  shift 2
  echo -n "."
  $BIN/run_with_timeout $limit $OUTDIR/$logfile $*
}


#
# Run the benchmarks:
# forall VMS
#   forall sizes
#     forall benchmarks
#       in 2 different scratch directories
#

for vm in $VMS
do
  VMFLAGS=
  case $vm in  
  JIKESRVM)  JAVA_HOME=/usr/lib/j2se/1.4 ;;
  DRLVM)     JAVA_HOME=$DRLVM_HOME ;;
  JROCKIT)   JAVA_HOME=/opt/jrockit-R26.3.0-jdk1.5.0_06 ;;
  SUN)       JAVA_HOME=/opt/jdk1.5.0_07 ;;
  BLACKDOWN) JAVA_HOME=/usr/lib/j2se/1.4 ;;
  TOKYO) case `uname -m` in
         ppc*) JAVA_HOME=/opt/IBMJava2-ppc-142;;
         i*86) JAVA_HOME=/opt/IBMJava2-142;;
         esac
         ;;
  J9) case `uname -m` in
      ppc*) JAVA_HOME=/opt/ibm-java2-ppc-50 ;;
      i*86) JAVA_HOME=/opt/ibm-java2-i386-50 ;;
      esac
         ;; 
  esac

  case $vm in
    JIKESRVM) JAVA=$RVM_ROOT/bin/rvm ;;
    DRLVM) JAVA=$JAVA_HOME/jre/bin/java ;;
    *) JAVA=$JAVA_HOME/bin/java;;
  esac
  export JAVA_HOME

  [ -e $OUTDIR/$vm ] || { mkdir $OUTDIR/$vm; }
  $JAVA -version &> $OUTDIR/$vm/version.txt

  for size in $SIZES
  do
    echo -n "$vm/$size: "
    for bm in $BMS
    do
      echo -n "$bm"
      HEAP=512
      case $bm in
        antlr)   case $vm in
                   DRLVM) VMFLAGS="-Xbootclasspath/p:$BIN/antlr.jar" ;;
                 esac ;;
        hsqldb)  HEAP=768 ;;
        xalan)   case $vm in
                   J9|TOKYO|DRLVM)
                     jar xf $JAR xalan.jar 
                     VMFLAGS="-Xbootclasspath/p:xalan.jar" ;;
                 esac ;;
        chart)   if [ $vm == "JIKESRVM" -o $vm == "DRLVM" ]; then 
                   # assume virtual framebuffer device
                   export DISPLAY=:0.0
                 fi ;;
        eclipse) if [ $vm == "JIKESRVM" ]; then
                   VMFLAGS="-Declipse.java.home=$JAVA_HOME"
                 fi ;;
      esac
      
      DFLAGS="-s $size -n 2"
      HEAPFLAGS="-Xmx${HEAP}m -Xms${HEAP}m"
      
      with_timeout 1200 $vm/$bm.$size.tmp.log $JAVA $VMFLAGS $HEAPFLAGS \
        -jar $JAR $DFLAGS -scratch /tmp/$$ $bm

      if [ "$size" != "large" ]; then
        with_timeout 1200 $vm/$bm.$size.log $JAVA $VMFLAGS $HEAPFLAGS \
          -jar $JAR $DFLAGS $bm
      fi

      #
      # VM-specific tests
      #
      if [ $vm == "JIKESRVM" -a "$size" != "large" ]; then
          with_timeout 1200 $vm/$bm.$size.2proc.log \
            $JAVA $VMFLAGS -X:processors=2 $HEAPFLAGS \
              -jar $JAR $DFLAGS $bm
      fi

      #
      # Performance run for default workload - do 3 iterations
      #
      case $bm in
        antlr) HEAP=64 ;;
        bloat) HEAP=256 ;;
        chart) HEAP=128;;
        fop) HEAP=32;;
        eclipse) HEAP=256;;
        hsqldb) HEAP=256;;
        jython) HEAP=64;;
        luindex) HEAP=128;;
        lusearch) HEAP=128;;
        pmd) HEAP=128;;
        xalan) HEAP=128;;
        *) HEAP=512;;
      esac
      HEAPFLAGS="-Xmx${HEAP}m -Xms${HEAP}m"
      if [ "$size" == "${PERF_SIZE:-default}" ]; then
        DFLAGS="-s $size -n 3"
        with_timeout 1800 $vm/$bm.$size.perf.log $JAVA $VMFLAGS $HEAPFLAGS \
          -jar $JAR $DFLAGS $bm
      fi
      echo -n " "
    done
    echo "...complete, publishing results"
    $BIN/test_dacapo_results results-$VERSION
  done
done
