#!/bin/bash
#
# Format results of test_dacapo into a web page
#

if [ -z "$BIN" ]; then
  . $(dirname $0)/config
fi

if [ $# -lt 1 ]
then
  echo "Usage $0 results-dir"
  exit 1
fi

PUBLISH=${PUBLISH_RESULTS:-true}

SIZES=$ALL_SIZES
VMS=$ALL_VMS
PERF_VMS=${PERF_VMS:-"JIKESRVM DRLVM"}
BMS=$ALL_BMS
RESULTS=$1
PASSES=1          # number of passes of benchmark

MAIN=$RESULTS/index.html
LASTVM=$(echo $VMS | awk '{ print $NF }')
SUMMARY=$RESULTS/summary.dat
DETAILS=$RESULTS/details.dat
PERF=$RESULTS/perf.dat

#
# Derived parameters
#
NUM_SIZES=$(echo $SIZES | wc -w)

#
# Format into an html table with one row per benchmark, column
# for VM
#
n_vms=`echo $VMS | wc -w`

result() {
  status=$1
  logs="$2"

  echo -n "<td class=$status>"
  LINK="&nbsp;"
  for log in $logs
  do
    LINK="${LINK}<a href=\"$log\">log</a>&nbsp;"
  done
  echo -n "$LINK"
  echo "</td>"
}

check_bm() {
  vm=$1
  bm=$2
  size=$3

  STATUS="nolog"
  LOGS=""
  PASS=0
  FAIL=0
  for ext in "" .tmp .2proc .perf
  do
    log=${vm}/${bm}.${size}${ext}.log
    logfile=${RESULTS}/${log}
    if [ -e $logfile ]; then
      if `grep -q FAILED $logfile`; then
        STATUS="fail";
        LOGS="$LOGS $log"
        FAIL=$(($FAIL + 1))
      elif `grep -q PASSED $logfile`; then
        if [ "$STATUS" != "fail" ]; then
          STATUS="pass"
        fi
        PASS=$((${PASS} + 1))
      else
        LOGS="$LOGS $log"
        STATUS="fail"
        FAIL=$(($FAIL + 1))
      fi
    fi # -e $logfile
  done
  result $STATUS "$LOGS"
  STATS="$PASS $FAIL"
}

check_bm_details() {
  vm=$1
  bm=$2
  size=$3

  echo -n "$vm $bm $size "
  for ext in "" .tmp .2proc .perf
  do
    log=${vm}/${bm}.${size}${ext}.log
    logfile=${RESULTS}/${log}
    if [ -e $logfile ]; then
      if `grep -q FAILED $logfile`; then
        echo -n "$log "
      elif `grep -q PASSED $logfile`; then
        :
      else
        echo -n "$log "
      fi
    fi # -e $logfile
  done
  echo
}

#
# dummy construct to give something other than a subprocess
# to redirect output from
#
if true; then
  # All output from here goes to $MAIN
  
  cols=$(($n_vms+2))
  colspan=$((100/$cols))
  
  echo "<html><head>"
  echo "<title>DaCapo regression test results for $RESULTS</title>"
  echo "<link rel=\"stylesheet\" type=\"text/css\" href=\"../regression.sty\"/>"
  echo "</head>"
  echo "<body>"
  echo "<h1>Regression test results $(date) $(uname -m)</h1>"
  echo "<table columns=$cols>"
  
  #
  # Table heading
  #
  echo "<col id=\"benchmark\">"
  echo -n "<col id=\"size\">"
  for vm in $VMS
  do
    if [ $vm == $LASTVM ]; then
      echo -n "<col id=\"last\">"
    else 
      echo -n "<col id=\"$vm\">" 
    fi
  done
  echo
  
  echo "<tr class=\"heading\">"
  echo "  <th width=\"$colspan%\" class=\"benchmark\">Benchmark</th>"
  echo "  <th width=\"$colspan%\" class=size>Size</th>"
  for vm in $VMS
  do
    echo "  <th width=\"$colspan%\" class=$vm>"
    echo "<a href=\"$vm/version.txt\">$vm</a>"
    echo "</th> " 
  done
  echo "</tr>"
  
  #
  # Declare these as arrays
  #
  declare -a PASS_BM FAIL_BM PASS_SIZE FAIL_SIZE PASS_VM FAIL_VM
  
  declare i
  i=0
  for bm in $BMS; do
    PASS_BM[$i]=0
    FAIL_BM[$i]=0
    i=$(($i+1))
  done
  
  i=0;
  for size in $SIZES; do
    PASS_SIZE[$i]=0
    FAIL_SIZE[$i]=0
    i=$(($i+1))
  done
  
  i=0;
  for vm in $VMS; do
    PASS_VM[$i]=0
    FAIL_VM[$i]=0
    i=$(($i+1))
  done
  #
  # Table body
  #
  declare bm_no
  declare size_no
  declare vm_no

  bm_no=0
  for bm in $BMS
  do
    size_no=0
    for size in $SIZES
    do
      echo -n "<tr class=\"$size\">"
      if [ "$size" == "small" ]; then
        echo "<th class=\"benchmark\" rowspan=${NUM_SIZES}>$bm</th>"
      fi
      echo -n "<td class=\"size\">$size</td>"
      vm_no=0
      for vm in $VMS
      do
        check_bm $vm $bm $size
        PASS=$(echo $STATS | cut -d' ' -f 1)
        FAIL=$(echo $STATS | cut -d' ' -f 2)
        PASS_BM[$bm_no]=$((${PASS_BM[$bm_no]}+$PASS))
        FAIL_BM[$bm_no]=$((${FAIL_BM[$bm_no]}+$FAIL))
        PASS_SIZE[$size_no]=$((${PASS_SIZE[$size_no]}+$PASS))
        FAIL_SIZE[$size_no]=$((${FAIL_SIZE[$size_no]}+$FAIL))
        PASS_VM[$vm_no]=$((${PASS_VM[$vm_no]}+$PASS))
        FAIL_VM[$vm_no]=$((${FAIL_VM[$vm_no]}+$FAIL))
        vm_no=$(($vm_no+1))
      done # for vm
      echo "</tr>"
      size_no=$(($size_no+1))
    done # for size
    bm_no=$(($bm_no+1))
  done # for bm
  echo "</table>"
fi > $MAIN

#############################################################################
#
# Generate the 'details.dat' file
#
if true; then
  # All output from here goes to $DETAILS

  for bm in $BMS; do
    for size in $SIZES; do
      for vm in $VMS; do
        check_bm_details $vm $bm $size
      done # for vm
   done # for size
  done # for bm
fi > $DETAILS

#
# Generate the summary
#
(
i=0
for bm in $BMS; do
  echo "benchmark $bm ${PASS_BM[$i]} ${FAIL_BM[$i]}"
  i=$(($i+1))
done
i=0
for size in $SIZES; do
  echo "size $size ${PASS_SIZE[$i]} ${FAIL_SIZE[$i]}"
  i=$(($i+1))
done
i=0
for vm in $VMS; do
  echo "vm $vm ${PASS_VM[$i]} ${FAIL_VM[$i]}" 
  i=$(($i+1))
done
) > $SUMMARY

perf_log() {
  vm=$1
  bm=$2
  log=${vm}/${bm}.default.perf.log
  echo ${RESULTS}/${log}
}

#
# Generate the performance summary
#
if true; then
  tstamp=$(cat $RESULTS/timestamp)
  echo "VM,Benchmark,first,second,third,"
  for vm in $PERF_VMS; do
    for bm in $BMS; do
      logfile=$(perf_log $vm $bm)
      if [ -e $logfile ]; then
        echo -n "$tstamp,$vm,$bm,"
        grep DaCapo $logfile | grep msec |
          awk 'BEGIN { pass=1; for (i=1; i <= 3; i++) score[i] = "-"; } 
              /PASSED/ { score[pass++] = $6} 
              /warmup/ { score[pass++] = $7}
              END { for (i=1; i < pass; i++) printf "%s,",score[i]; printf "\n" }'
      fi
    done
  done 
fi> $PERF


#
# Publish the results
#

# truncate any files that are too big
find $RESULTS -type f -size +10000 | xargs $BIN/trim
if [ $PUBLISH == "true" ]; then
  rsync -a $RESULTS $PUBLIC
fi

echo "</body>" >> $MAIN

