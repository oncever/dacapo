options {
	STATIC = false;
}
PARSER_BEGIN(ConfigFile)
package dacapo.parser;

import java.io.*;
import java.util.Vector;

class ConfigFile {
  public static void main(String[] args) {
    ConfigFile parser;
    try {
      parser = new ConfigFile(new FileInputStream(args[0]));
      parser.configFile();
    } catch (ParseException p) {
    	System.err.println("Parse exception");
    	p.printStackTrace();
    	return;
    } catch (FileNotFoundException e) {
        System.err.println("File " + args[0] + " not found.");
        return;
    }
    System.out.println("Success!");
  }
  
  private static String unQuote(Token token) {
  	return token.image.substring(1,token.image.length()-1);
  }
  
  private static String unHex(Token token) {
  	return token.image.substring(2).toLowerCase();
  }
}
PARSER_END(ConfigFile)

/* WHITE SPACE */

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* Reserved words */
TOKEN :
{
  < ARGS : "args" >
| < BENCHMARK : "benchmark" >
| < BYTES : "bytes" >
| < CLASS : "class" >
| < COPYRIGHT : "copyright" >
| < DESCRIPTION : "description" >
| < DIGEST : "digest" >
| < KEEP : "keep" >
| < LICENSE : "license" >
| < LINES : "lines" >
| < LONG : "long" >
| < METHOD : "method" >
| < OUTPUT : "output" >
| < SHORT : "short" >
| < SIZE : "size" >
| < URL : "url" >
| < VERSION : "version" >
}

/* Literals */
TOKEN:
{                 
  < IDENT : ["a"-"z","A"-"Z","_","$"] (["a"-"z","A"-"Z","0"-"9","_","-","$","."])* >
| < HEX_STRING : "0" ["x","X"] (["a"-"f","A"-"F","0"-"9"])* >
| < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
| < INT_LITERAL : (["0"-"9"])+ >
| < SEMI : ";" >
| < COMMA : "," >
}

Config configFile() :
{ Config config;  }
{
  config=config() (sizeSpec(config) | description(config))+
  { return config; }
}

Config config() :
{ Config config; Token name, className, methodName; }
{
  <BENCHMARK> name=<IDENT> 
  { config = new Config(name.image); }
  [<CLASS> className=<IDENT> 
    { config.setClass(className.image); }
    [<METHOD> methodName=<IDENT>
      { config.setMethod(methodName.image); }
    ]] <SEMI>
  { return config; }
} 

void sizeSpec(Config config) :
{ Token size; }
{
  <SIZE> size=<IDENT> (sizeClause(config,size.image))+ <SEMI>
}

void sizeClause(Config config, String size) :
{   Vector args = new Vector(); 
	String arg;
}
{
	   <ARGS> [arg=string() { args.add(arg); } 
	          (<COMMA> arg=string() { args.add(arg); })*]
       { config.addSize(size,args); }
    |  <OUTPUT> outputFile(config,size) (<COMMA> outputFile(config,size))*
}

void outputFile(Config config, String size) :
{ String file; }
{
	file=string()
	{ config.addOutputFile(size,file); }
	(outputClause(config,size,file))*
}

void outputClause(Config config, String size, String file) :
{ String digest; int n; long l; }
{
	  <DIGEST> digest=hex() { config.setDigest(size,file,digest); }
	| <KEEP>                { config.setKeep(size,file); }
	| <LINES> n=integer()   { config.setLines(size,file,n); }
	| <BYTES> l=longInt()   { config.setBytes(size,file,l); }
}

void description(Config config) :
{}
{
  <DESCRIPTION> descElement(config) (<COMMA> descElement(config))* <SEMI>
}

void descElement(Config config) :
{ String id, desc; }
{
  id=descId() desc=string()
  { config.addDesc(id,desc); }
}

String descId() :
{}
{
  (<COPYRIGHT> | <LICENSE> | <LONG> | <SHORT> | <URL> | <VERSION>)
  { return token.image; }
}

String string() :
{ Token s; }
{
	s=<STRING_LITERAL> { return unQuote(s); }
}

int integer() :
{ Token n; }
{
	n=<INT_LITERAL> { return Integer.parseInt(n.image); }
}

long longInt() :
{ Token n; }
{
	n=<INT_LITERAL> { return Long.parseLong(n.image); }
}

String hex() :
{ Token h; }
{
	h=<HEX_STRING> { return unHex(h); }
}