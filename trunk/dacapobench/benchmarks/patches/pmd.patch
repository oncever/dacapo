diff -r -N -w -u -I '[$]Id:' --exclude='*.class' --exclude='.*' --exclude='*.orig' --exclude='*.rej' --exclude=CVS --exclude='#*' pmd.orig/pmd-1.8/etc/build.xml pmd/pmd-1.8/etc/build.xml
--- pmd.orig/pmd-1.8/etc/build.xml	2004-05-20 04:13:09.000000000 +1000
+++ pmd/pmd-1.8/etc/build.xml	2005-09-30 15:30:21.000000000 +1000
@@ -18,6 +18,8 @@^
         <include name="jaxen-core-1.0-fcs.jar"/>
         <include name="saxpath-1.0-fcs.jar"/>
         <include name="xercesImpl-2.0.2.jar"/>
+        <include name="junit.jar"/>
         <include name="xmlParserAPIs-2.0.2.jar"/>
     </fileset>
+    <pathelement location="${dacapo.classes}"/>
 </path>
 
 <target name="delete">
diff -r -N -w -u -I '[$]Id:' --exclude='*.class' --exclude='.*' --exclude='*.orig' --exclude='*.rej' --exclude=CVS --exclude='#*' pmd.orig/pmd-1.8/src/net/sourceforge/pmd/PMD.java pmd/pmd-1.8/src/net/sourceforge/pmd/PMD.java
--- pmd.orig/pmd-1.8/src/net/sourceforge/pmd/PMD.java	2004-04-16 05:04:24.000000000 +1000
+++ pmd/pmd-1.8/src/net/sourceforge/pmd/PMD.java	2005-09-30 15:25:18.000000000 +1000
@@ -17,12 +17,15 @@
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.Reader;
+import java.io.StreamTokenizer;
 import java.io.UnsupportedEncodingException;
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.StringTokenizer;
 
+import dacapo.TestHarness;
+
 public class PMD {
 
     public static final String EOL = System.getProperty("line.separator", "\n");
@@ -90,6 +93,9 @@
         if (opts.containsCommaSeparatedFileList()) {
             files = collectFromCommaDelimitedString(opts.getInputFileName());
         } else {
+          if (opts.getInputFileName().startsWith("@"))
+            files = collectFilesFromFile(opts.getInputFileName().substring(1));
+          else
             files = collectFilesFromOneName(opts.getInputFileName());
         }
 
@@ -110,7 +116,9 @@
                 File file = (File) i.next();
                 ctx.setSourceCodeFilename(glomName(opts.shortNamesEnabled(), opts.getInputFileName(), file));
                 try {
-                    pmd.processFile(new FileInputStream(file), opts.getEncoding(), rules, ctx);
+                  InputStream st;
+                  st = TestHarness.getInputStream(file);
+                    pmd.processFile(st, opts.getEncoding(), rules, ctx);
                 } catch (PMDException pmde) {
                     if (opts.debugEnabled()) {
                         pmde.getReason().printStackTrace();
@@ -160,6 +168,27 @@
         return name;
     }
 
+  private static List collectFilesFromFile(String inputFileName) {
+    try {
+      java.io.BufferedReader reader =
+        new java.io.BufferedReader(new InputStreamReader(TestHarness.getInputStream(inputFileName)));
+      
+      List files = new ArrayList();
+      
+      for (String l=reader.readLine();
+           l != null;
+           l=reader.readLine()) {
+        files.add(new File(l));
+      }
+      return files;
+    } catch (FileNotFoundException e) {
+      throw new RuntimeException("File " + inputFileName + " error: "+e);
+    } catch (java.io.IOException e) {
+      throw new RuntimeException("File " + inputFileName + " error: "+e);
+    }
+
+  }
+  
     private static List collectFilesFromOneName(String inputFileName) {
         return collect(inputFileName);
     }
