<!--
 * Ant build file for the dacapo benchmark suite.
 *       
 * Public targets are 
 * - dist (default) compiles from source and creates the dacapo jar file. 
 * - jar         compiles from source and creates the dacapo jar file. 
 * - sourcedist  Downloads sources and builds. 
 * - sources     download the sources from the 'net, if they are available.
 * - clean       remove files generated buring the build process
 * - distclean   remove files generated buring the build process, 
 *               including the 'results'
 * - sourceclean Remove all distribution files, and all downloadable
 *               sources.  This prepares an "ip-clean" distribution.
 *       
 * External tools required (apart from a JDK and Ant)
 *   - make
 *   - javacc, assumed to be on the path, with library files in 
 *     /usr/share/javacc/lib
 *   
 *   Author: Robin Garner, Australian National University
 *   $Date$
 *   $Id$
-->

<project name="DacapoBenchmarks" default="dist" basedir=".">
  <description>Dacapo benchmarks</description>
  <property name="javacchome" location="/usr/share/java"/>
  <property name="src" location="src"/>
  <property name="extra" location="../extra"/>
  <property name="bmsrc" location="bmsrc"/>
  <property name="patches" location="patches"/>
  <property name="build_src" location="build_src"/>
  <property name="build" location="build"/>
  <property name="originals" location="originals"/>
  <property name="sources" location="sources"/>
  <property name="stub" location="stub"/>
  <property name="data" location="data"/>
  <property name="zipdata" location="${build}/data"/>
  <property name="config" location="cnf"/>

  <!-- benchmark versions -->
  <property name="antlr.version" value="2.7.2"/>
  <property name="batik.version" value="1.6"/>
  <property name="bloat.version" value="1.0"/>
  <property name="chart.version" value="1.0.0"/>
  <property name="eclipse.version" value="3.1.2"/>
  <property name="fop.version" value="0.20.5"/>
  <property name="hsqldb.version" value="1_7_1"/>
  <property name="jython.version" value="2.1"/> <property name="jython.cvstag" value="Release_2_1"/>
  <property name="lucene.version" value="1.9.1"/>
  <property name="pmd.version" value="3.7"/>
  <property name="xalan.version" value="2_7_0"/>
  <!-- auxilary downloads -->
  <property name="itext.version" value="1.02b"/>
  <property name="junit.version" value="3.8.1"/>
  <property name="xerces.version" value="2.6.2"/>

  <!-- benchmark locations -->
  <property name="antlr.url" value="http://www.antlr.org/download"/>	
  <property name="batik.url" value="http://archive.apache.org/dist/xml/batik"/>
  <property name="bloat.url" value="ftp://ftp.cs.purdue.edu/pub/hosking/bloat"/>	
  <property name="chart.url" value="http://easynews.dl.sourceforge.net/sourceforge/jfreechart"/>	
  <property name="eclipse.url" value="http://download2.eclipse.org/eclipse/downloads/drops/R-3.1.2-200601181600"/>	
  <property name="fop.url" value="http://archive.apache.org/dist/xml/fop"/>	
  <property name="hsqldb.url" value="http://easynews.dl.sourceforge.net/sourceforge/hsqldb"/>	
  <property name="jython.url" value=":pserver:anonymous@jython.cvs.sourceforge.net:/cvsroot/jython"/>	
  <property name="lucene.url" value="http://archive.apache.org/dist/lucene/java"/>	
  <property name="pmd.url" value="http://easynews.dl.sourceforge.net/sourceforge/pmd"/>	
  <property name="xalan.url" value="http://archive.apache.org/dist/xml/xalan-j"/>	
  <!-- auxilary downloads -->
  <property name="itext.url" value="http://easynews.dl.sourceforge.net/sourceforge/itext"/>	
  <property name="junit.url" value="http://easynews.dl.sourceforge.net/sourceforge/junit"/>	
  <property name="xerces.url" value="http://archive.apache.org/dist/xml/xerces-j"/>	

	<!-- External programs -->
  <property name="make" location="/usr/bin/make"/>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <mkdir dir="${build}/cnf"/>
    <mkdir dir="${zipdata}"/>
    <mkdir dir="${build_src}"/>
  </target>


  <target name="compile" depends="lucene,antlr,batik,bloat,chart,eclipse,fop,hsqldb,jython,pmd,ps,xalan"
          description="compile the sources for all benchmarks" >
  </target>


  <!-- ================================= 
          target: harness           
         ================================= -->
  <target name="harness" depends="init" description="compile the source ">
    <javacc javacchome="${javacchome}" target="${src}/dacapo/parser/ConfigFile.jj"/>
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${src}" destdir="${build}" sourcepath="${stub}"/>
  </target>

  <!-- ================================= 
          target: bms          
         ================================= -->
  <target name="bms" depends="compile" description="compile the benchmarks">
    <!-- Compile the java code from ${src} into ${build} -->
    <javac srcdir="${bmsrc}" destdir="${build}" excludes="${bmsrc}/dacapo/eclipse/src/**/*"/>
 
  </target>


  <!-- ================================= 
        target: dist              
       ================================= -->
  <target name="dist" depends="jar" 
    description="--> Build the distribution from source">
  </target>



  <!-- ================================= 
          target: sourcedist              
         ================================= -->
  <target name="sourcedist" depends="sources,dist" 
      description="--> Download the source and then build">
  </target>


  <!-- ================================= 
        target: jar              
       ================================= -->
  <target name="jar" depends="harness,init"
          description="generate the distribution jar file" >
    <!-- Test data and configuration files -->
    <copy todir="${build}/cnf">
      <fileset dir="${config}"/>
    </copy>
    <copy todir="${build}/META-INF" overwrite="true">
      <fileset dir="${src}/META-INF"/>
    </copy>

    <!-- Put everything in ${build} into the MyProject-${DSTAMP}.jar file -->
    <jar jarfile="dacapo-${DSTAMP}.jar" basedir="${build}"
         index="true"
         manifest="${build}/META-INF/MANIFEST.MF"
    />
  </target>


  <!-- ================================= 
        target: clean              
       ================================= -->
  <target name="clean" 
          description="clean up after the build process">
    <delete dir="${build}"/>
    <delete dir="${build_src}/antlr/antlr-${antlr.version}"/>
    <delete dir="${build_src}/batik/xml-batik"/>
    <delete dir="${build_src}/bloat/bloat"/>
    <delete dir="${build_src}/chart/jfreechart-${chart.version}"/>
    <delete dir="${build_src}/fop/fop-${fop.version}"/>
    <delete dir="${build_src}/eclipse/"/>
    <delete dir="${build_src}/hsqldb/hsqldb"/>
    <delete dir="${build_src}/junit"/>
    <delete dir="${build_src}/jython/jython"/>
    <delete dir="${build_src}/lucene/lucene-${lucene.version}"/>
    <delete dir="${build_src}/pmd/pmd-${pmd.version}"/>
    <delete dir="${build_src}/ps/edu"/>
    <delete dir="${build_src}/xalan/xalan-j_2_4_1"/>
    <delete dir="${build_src}/xalan/xalan-j_${xalan.version}"/>
    <delete dir="${build_src}/xerces"/>
    <delete dir="cachedir"/>
    <!-- Jython's mess -->
    <delete dir="scratch"/>
    <!-- default scratch directory -->
  </target>

  <!-- ================================= 
        target: distclean              
       ================================= -->
  <target name="distclean" depends="clean"
          description="clean up including the resulting jar files">
    <delete dir="bin"/>
    <delete>
      <fileset dir="${basedir}">
        <include name="dacapo*.jar"/>
      </fileset>
    </delete>
  </target>


  <!-- ================================= 
          target: sourceclean              
         ================================= -->
  <target name="sourceclean" depends="distclean" 
            description="--> Delete all downloadable sources, too">
    <delete dir="${sources}"/>
  </target>



  <!-- *************************************************************************** -->
  <!--                        Fetch sources                                        -->
  <!-- *************************************************************************** -->

  <target name="init-sources" description="Prepare to download sources">
    <mkdir dir="${sources}"/>
  </target>

  <target name="sources" 
    description="Download sources from their original locations"
    depends="antlr-source,batik-source,bloat-source,chart-source,eclipse-source,fop-source,hsqldb-source,jython-source,lucene-source,pmd-source,ps-source,xalan-source,xerces-source">
  </target>

  <target name="antlr-source" depends="init-sources">
    <get src="${antlr.url}/antlr-${antlr.version}.tar.gz"
         dest="${sources}/antlr-${antlr.version}.tar.gz"
       usetimestamp="true"/>
  </target>

  <target name="batik-source" depends="init-sources">
    <get src="${batik.url}/batik-src-${batik.version}.zip"
         dest="${sources}/batik-src-${batik.version}.zip"
         usetimestamp="true"/>
  </target>

  <target name="bloat-source" depends="init-sources">
    <get src="${bloat.url}/bloat-${bloat.version}-src.tar.gz"
         dest="${sources}/bloat-${bloat.version}-src.tar.gz"/>
    <get src="${bloat.url}/bloat-${bloat.version}-examples.jar"
         dest="${sources}/bloat-${bloat.version}-examples.jar"/>
  </target>

  <target name="chart-source" depends="init-sources">
    <get src="${chart.url}/jfreechart-${chart.version}.tar.gz"
         dest="${sources}/jfreechart-${chart.version}.tar.gz"
       usetimestamp="true"/>
    <get src="${itext.url}/itext-{$itext.version}.jar"
         dest="${sources}/itext-{$itext.version}.jar"
       usetimestamp="true"/>
  </target>

  <target name="eclipse-source" depends="init-sources">
	<get src="${eclipse.url}/eclipse-SDK-${eclipse.version}-linux-gtk.tar.gz"
	     dest="${sources}/eclipse-SDK-${eclipse.version}-linux.gtk.tar.gz"
	     usetimestamp="true"/>
	<get src="${eclipse.url}/eclipse-Automated-Tests-${eclipse.version}.zip"
		 dest="${sources}/eclipse-Automated-Tests-${eclipse.version}.zip"
		 usetimestamp="true"/>
    </target>

	<target name="fop-source" depends="init-sources">
    <get src="{$fol.url}/fop-${fop.version}-src.tar.gz"
         dest="${sources}/fop-${fop.version}-src.tar.gz"
       usetimestamp="true"/>
  </target>

  <target name="hsqldb-source" depends="init-sources,junit-source">
    <get src="{${hsqldb.url}/hsqldb_${hsqldb.version}.zip"
    	dest="${sources}/hsqldb_${hsqldb.version}.zip"  
       usetimestamp="true"/>
  </target>

 
  <target name="jython-source" depends="init-sources">
  	<!--
  		<get dest="${sources}/jython-${jython.version}.zip"
  		src="http://superb-east.dl.sourceforge.net/sourceforge/jython/jython-21.class"
    usetimestamp="true"/>-->
  	<mkdir dir="${sources}/jython-${jython.version}/"/>
    <cvs cvsRoot="${jython.url}"
         package="jython"
         tag="${jython.cvstag}"
         dest="${sources}/jython-${jython.version}/"/>
    <tar basedir="${sources}/jython-${jython.version}/" 
         destfile="${sources}/jython-${jython.version}.tgz" 
         compression="gzip"/>
    <delete dir="${sources}/jython-${jython.version}"/>
  </target>

  <target name="junit-source" depends="init-sources">
    <get dest="${sources}/junit${junit.version}.zip"
         src="${junit.url}/junit${junit.version}.zip"
       usetimestamp="true"/>
  </target>

  <target name="lucene-source" depends="init-sources">
    <get dest="${sources}/lucene-${lucene.version}-src.tar.gz"
         src="${lucene.url}/lucene-${lucene.version}-src.tar.gz"
   usetimestamp="true"/>
  </target>

  <target name="pmd-source" depends="init-sources">
    <get src="${pmd.url}/pmd-src-${pmd.version}.zip"
         dest="${sources}/pmd-src-${pmd.version}.zip"
       usetimestamp="true"/>
  </target>

  <target name="ps-source" depends="init-sources">
    <!-- ps was a student assignment - the source here is the definitive one -->
    <copy file="originals/ps.tgz" todir="${sources}"/>
  </target>

  <target name="xalan-241-source" depends="init-sources">
    <get src="http://archive.apache.org/dist/xml/xalan-j/xalan-j_2_4_1-src.tar.gz"
               dest="${sources}/xalan-j_2_4_1-src.tar.gz"
         usetimestamp="true"/>
  </target>

  <target name="xalan-source" depends="init-sources">
    <get src="${xalan.url}/xalan-j_${xalan.version}-src.tar.gz"
               dest="${sources}/xalan-j_${xalan.version}-src.tar.gz"
         usetimestamp="true"/>
  </target>

  <target name="xerces-source" depends="init-sources">
    <get src="${xerces.url}/Xerces-J-bin.${xerces.version}.tar.gz"
         dest="${sources}/Xerces-J-bin.${xerces.version}.tar.gz"
       usetimestamp="true"/>
  </target>

  <!-- *************************************************************************** -->
  <!--                            Build                                            -->
  <!-- *************************************************************************** -->

  <!-- ================================= 
        target: antlr 
       ================================= -->
  <target name="antlr" description="Build antlr" depends="harness">
    <mkdir dir="${build_src}/antlr"/>
    <untar src="${sources}/antlr-${antlr.version}.tar.gz" 
           dest="${build_src}/antlr/"
         compression="gzip"/>

    <!-- Apply the dacapo patch -->
    <patch patchfile="${patches}/antlr.patch" 
           dir="${build_src}"
           strip="0"/>

    <!-- Build directly with javac, classfiles into the build directory -->
    <javac srcdir="${build_src}/antlr/antlr-${antlr.version}/antlr/"
         classpath="${build}"
         destdir="${build}"/>

    <!-- Install the test data -->
    <zip basedir="${data}"
         includes="antlr/**"
         destfile="${zipdata}/antlr.zip"/>

          <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}"
                 includes="dacapo/antlr/*"/>
  </target>

  <!-- ================================= 
        target: batik 
       ================================= -->
  <target name="batik" description="Build batik" depends="harness,xerces">
    <property name="batik-top" value="${build_src}/batik/xml-batik"/>

    <mkdir dir="${build_src}/batik"/>

    <!-- unpack the source files -->
    <unzip src="${sources}/batik-src-${batik.version}.zip" 
           dest="${build_src}/batik/"/>

    <!-- Apply the dacapo patch -->
    <fixcrlf srcdir="${batik-top}/sources" includes="**/*.java"/>
    <patch patchfile="${patches}/batik.patch" 
           dir="${build_src}"
           strip="0" ignorewhitespace="yes"/>

    <!-- Build using the supplied build.xml -->
    <ant antfile="${batik-top}/build.xml" dir="${batik-top}" 
         target="compiletest" inheritall="false">
      <property name="dacapo.classes" location="${build}"/>
    </ant>

    <!-- Copy the batik class files -->
    <copy todir="${build}">
      <fileset dir="${batik-top}/classes">
        <include name="**/*.class"/>
      </fileset>
    </copy>

    <!-- Copy the batik resource files -->
    <copy todir="${build}">
      <fileset dir="${batik-top}/resources" excludes="${batik-top}/resources/**/CVS">
        <include name="**"/>
      </fileset>
    </copy>

    <!-- Install the test data -->
    <zip basedir="${data}"
         includes="batik/**"
         destfile="${zipdata}/batik.zip"/>

          <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}"
                 includes="dacapo/batik/*"/>
  </target>

  <!-- ================================= 
        target: bloat 
       ================================= -->
  <target name="bloat" depends="bloat.benchmark,bloat.harness" description="Build bloat"/>
  <!-- Build the bloat dacapo harness -->
  <target name="bloat.harness" depends="harness" description="Build bloat">
    <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" includes="dacapo/bloat/*"/>
  </target>
  <!-- Build the bloat benchmark -->
  <target name="bloat.benchmark" description="Build bloat" depends="harness">
    <property name="bloat-top" value="${build_src}/bloat"/>
    <mkdir dir="${bloat-top}"/>

    <!-- Un-tar the source distribution -->
    <untar src="${sources}/bloat-${bloat.version}-src.tar.gz" 
           dest="${bloat-top}"
         compression="gzip"/>

    <!-- Extract some files from bloat's examples.jar -->
    <unjar src="${sources}/bloat-${bloat.version}-examples.jar" dest="${bloat-top}">
      <patternset>
        <include name="bloat/TraceMethods.java"/>
      </patternset>
    </unjar>

    <!-- Apply the dacapo patch -->
    <patch patchfile="${patches}/bloat.patch" 
               dir="${bloat-top}"
               strip="0" ignorewhitespace="yes"/>

    <!-- Build bloat -->
    <exec executable="${make}"
      dir="${bloat-top}/src/EDU/purdue/cs/bloat/"/>
    <javac srcdir="${bloat-top}/bloat" classpath="${bloat-top}/src/"/>

    <!-- Copy the class files into the build directory -->
    <copy todir="${build}">
      <fileset dir="${bloat-top}/src" excludes="${bloat-top}/resources/**/CVS">
        <include name="**/*.class"/>
      </fileset>
    </copy>
    <mkdir dir="${build}/bloat"/>
    <copy todir="${build}/bloat">
      <fileset dir="${bloat-top}/bloat">
        <include name="*.class"/>
      </fileset>
    </copy>
   </target>


  <!-- ================================= 
          target: chart              
         ================================= -->
	<target name="chart" depends="chart.benchmark,chart.harness" description="--> build the jFreeChart benchmark"/>
    <!-- Build the chart dacapo harness -->
	<target name="chart.harness" depends="init" description="--> build the jFreeChart harness">
	   <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" includes="dacapo/chart/*"/>
	</target>
    <!-- Build the chart benchmark -->
	<target name="chart.benchmark" depends="init" description="--> build the jFreeChart benchmark">
    <property name="chart-top" value="${build_src}/chart/jfreechart-${chart.version}"/>

    <!-- Un-tar the source distribution -->
    <mkdir dir="${build_src}/chart/"/>
    <untar src="${sources}/jfreechart-${chart.version}.tar.gz" 
             dest="${build_src}/chart/"
             compression="gzip"/>

    <!-- Build it using jfreechart's build.xml -->
    <ant antfile="${chart-top}/ant/build.xml" dir="${chart-top}" 
           target="compile" inheritall="false"/>

    <!-- Copy files to the build directory -->
    <unjar src="${chart-top}/jfreechart-${chart.version}.jar" dest="${build}"/>
    <unjar src="${chart-top}/lib/jcommon-${chart.version}.jar" dest="${build}"/>
    <unjar src="${sources}/itext-1.02b.jar" dest="${build}"/>

    <!-- Install the test data -->
    <zip basedir="${data}" includes="chart/**" destfile="${zipdata}/chart.zip"/>
  </target>


  <!-- ================================= 
          target: eclipse              
         ================================= -->
  <target name="eclipse" depends="eclipse.benchmark,eclipse.harness" description="--> build the eclipse benchmark"/>
  <!-- Build the eclipse dacapo harness -->
  <target name="eclipse.harness" depends="init" description="--> build the eclipse harness">
    <javac srcdir="${bmsrc}" classpath="${build}:${build_src}/eclipse/eclipse/plugins/org.eclipse.osgi_${eclipse.version}.jar" destdir="${build}" includes="dacapo/eclipse/EclipseHarness.java"/>                 
  </target>
  <!-- Build the eclipse benchmark -->
  <target name="eclipse.benchmark" depends="init" description="--> build the eclipse benchmark">
    <property name="eclipse-top" value="${build_src}/eclipse/eclipse"/>

 	<untar src="${sources}/eclipse-SDK-${eclipse.version}-linux.gtk.tar.gz" dest="${build_src}/eclipse/" compression="gzip"/>
  	<unzip src="${sources}/eclipse-Automated-Tests-${eclipse.version}.zip" dest="${build_src}/eclipse/">
   		<patternset>
  			<include name="eclipse-testing/eclipse-junit-tests-M20060118-1600.zip"/>
  		</patternset>
  	</unzip>
 	<unzip src="${build_src}/eclipse/eclipse-testing/eclipse-junit-tests-M20060118-1600.zip" dest="${build_src}/eclipse/"/>
    <delete dir="${build_src}/eclipse/eclipse-testing"/>
	<!-- build the eclipse plugin, which is necessary to fire up eclipse from within our harness -->
   	<ant antfile="${extra}/eclipse-plugin/build.xml" dir="${extra}/eclipse-plugin" 
           target="build.update.jar" inheritall="false">
    	<property name="eclipsesrc.home" location="${build_src}/eclipse"/>
    	<property name="plugin.destination" location="${build_src}/eclipse/eclipse/plugins/"/>
    </ant>
	
    <!-- Install the test data -->
    <zip destfile="${zipdata}/eclipse.zip" includes="eclipse/**" basedir="${build_src}/eclipse"/>
  </target>


  <!-- ================================= 
          target: fop              
         ================================= -->
  <target name="fop" depends="harness" description="--> Build the fop benchmark">
    <mkdir dir="${build_src}/fop"/>
    <property name="fop-top" value="${build_src}/fop/fop-${fop.version}/"/>
    <!-- Expand the source distribution -->
    <untar src="${sources}/fop-${fop.version}-src.tar.gz" 
           dest="${build_src}/fop" compression="gzip"/>

    <!-- Build it using fop's build.xml
      
           Use 'exec' rather than 'ant' because of the brain-damaged way that fop's
           build.xml handles relative directories.  The classpath allows the patched
           sources to see the test harness code.
        -->
    <exec executable="ant" dir="${fop-top}">
    </exec>

    <!-- Copy the build to the distribution directory -->
    <unjar src="${fop-top}/build/fop.jar" dest="${build}"/>
    <unjar src="${fop-top}/lib/avalon-framework-cvs-20020806.jar" dest="${build}"/>

    <!-- Install the test data -->
    <zip basedir="${data}"
           includes="fop/**"
           destfile="${zipdata}/fop.zip"/>

  	<!-- Build the fop dacapo harness -->
    <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" includes="dacapo/fop/*"/>
  </target>

	
  <!-- ================================= 
          target: junit             
       ================================= -->
  <target name="junit" description="--> The junit library - required by some other benchmarks">
    <!-- Install the junit jar file -->
    <unzip src="${sources}/junit${junit.version}.zip" dest="${build_src}/junit/">
      <patternset>
        <include name="junit${junit.version}/junit.jar"/>
      </patternset>
    </unzip>
  </target>

	
  <!-- ================================= 
          target: hsqldb              
       ================================= -->
  <target name="hsqldb" depends="harness,junit" description="--> The hsqldb benchmark">
    <mkdir dir="${build_src}/hsqldb"/>
    <property name="hsqldb-top" value="${build_src}/hsqldb/"/>
    <!-- Expand the source distribution -->
    <unzip src="${sources}/hsqldb_${hsqldb.version}.zip" dest="${hsqldb-top}"/>

    <copy file="${build_src}/junit/junit${junit.version}/junit.jar"
            todir="${hsqldb-top}/hsqldb/lib/"/>

    <!-- Build it using hsqldb's build.xml
      
           Use 'exec' rather than 'ant' because of the brain-damaged way that fop's
           build.xml handles relative directories.  The classpath allows the patched
           sources to see the test harness code.
        -->
    <ant antfile="${hsqldb-top}/hsqldb/build/build.xml" dir="${hsqldb-top}/hsqldb" 
           target="jartest" inheritall="false"/>

    <!-- Copy the build to the distribution directory -->
    <unjar src="${hsqldb-top}/hsqldb/lib/hsqldbtest.jar" dest="${build}"/>

  	<!-- Build the hsqldb dacapo harness -->
    <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}" includes="dacapo/hsqldb/*"/>
  </target>


  <!-- ================================= 
          target: jython                
         ================================= -->
  <target name="jython" depends="harness" description="--> Build the Jython benchmark">
    <mkdir dir="${build_src}/jython"/>
    <property name="jython-top" value="${build_src}/jython/"/>

    <!-- Expand the jython distribution class -->
  	 <!-- <unzip src="${sources}/jython-${jython.version}.zip" dest="${jython-top}"/>-->
   <untar src="${sources}/jython-${jython.version}.tgz" dest="${jython-top}" compression="gzip"/>

    <!-- Apply the dacapo patch -->
    <patch patchfile="${patches}/jython.patch" 
                 dir="${build_src}"
                 strip="0" ignorewhitespace="yes"/>

    <!-- Build jython -->
    <ant antfile="${jython-top}/jython/build.xml" dir="${jython-top}/jython" inheritall="false">
      <property name="javaccHome2" location="${javacchome}"/>
    </ant>

    <!-- Copy files to the distribution directory -->
    <unjar src="${jython-top}/jython/jython.jar" dest="${build}"/>

    <!-- Install the test data -->
    <zip basedir="${data}"
           includes="jython/**"
           destfile="${zipdata}/jython.zip"/>

          <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}"
                 includes="dacapo/jython/*"/>
  </target>


  <!-- ================================= 
          target: lucene    
         ================================= -->
  <target name="lucene" depends="harness" description="--> Build the lucene benchmark">
    <property name="lucene-top" value="${build_src}/lucene"/>
    <mkdir dir="${lucene-top}"/>
    <untar src="${sources}/lucene-${lucene.version}-src.tar.gz" 
             dest="${lucene-top}"
       compression="gzip"/>

    <!-- Build using Ant -->
    <ant antfile="${lucene-top}/lucene-${lucene.version}/build.xml"
           target="jar-core"
           dir="${lucene-top}/lucene-${lucene.version}"
           inheritall="false">
    </ant>

    <!-- Build using Ant -->
    <ant antfile="${lucene-top}/lucene-${lucene.version}/build.xml"
           target="jar-demo"
           dir="${lucene-top}/lucene-${lucene.version}"
           inheritall="false">
    </ant>

    <!-- Install the lucene classes in the build directory -->
    <unjar src="${lucene-top}/lucene-${lucene.version}/build/lucene-core-1.9.2-dev.jar" 
             dest="${build}"/>
    <unjar src="${lucene-top}/lucene-${lucene.version}/build/lucene-demos-1.9.2-dev.jar" 
             dest="${build}"/>

    <!-- Install the test data -->
    <zip basedir="${data}" 
           includes="luindex/**"
           destfile="${zipdata}/luindex.zip"/>

    <!-- Install the test data -->
    <zip basedir="${data}" 
           includes="lusearch/**"
           destfile="${zipdata}/lusearch.zip"/>
         <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}"
                 includes="dacapo/lucene/*"/>
       </target>

  <!-- ================================= 
          target: pmd    
         ================================= -->
  <target name="pmd" depends="harness,xerces,junit" description="--> Build the pmd benchmark">
  	
  	<mkdir dir="${build_src}/pmd"/>
    <property name="pmd-top" value="${build_src}/pmd/pmd-${pmd.version}"/>

    <!-- Expand the pmd distribution zipfile -->
    <unzip src="${sources}/pmd-src-${pmd.version}.zip" dest="${build_src}/pmd"/>

    <!-- Apply the dacapo patch -->
    <!-- <patch patchfile="${patches}/pmd.patch" 
             dir="${build_src}"
             strip="0" ignorewhitespace="yes"/> -->

    <!-- Install the junit jar file -->
    <!-- <copy file="${build_src}/junit/junit${junit.version}/junit.jar"
            todir="${pmd-top}/lib/"/> -->

  	<!-- Build using Ant, setting the classpath appropriately -->
  	<exec dir="${pmd-top}/bin" executable="ant">
        <arg value="compile"/>
        <env key="CLASSPATH" value=".:${build_src}/junit/junit${junit.version}/junit.jar"/>
        <env key="ANT_HOME" value="${ant.install}"/>
    </exec>		
 
  	<!-- Copy the classfiles to the dist directory -->
    <copy todir="${build}">
      <fileset dir="${pmd-top}/build">
        <include name="net/**/*.class"/>
      </fileset>
    </copy>
<!--
    <unjar src="${pmd-top}/lib/xmlParserAPIs-${xerces.version}.jar" dest="${build}">
      <patternset>
        <include name="org/w3c/dom/**/*.class"/>
      </patternset>
    </unjar> 
    <unjar src="${pmd-top}/lib/xercesImpl-${xerces.version}.jar" dest="${build}">
      <patternset>
        <include name="org/w3c/dom/**/*.class"/>
      </patternset>
    </unjar>  
-->

    <unjar src="${pmd-top}/lib/jaxen-1.1-beta-7.jar" dest="${build}"/> 
    <!-- <unjar src="${pmd-top}/lib/jaxen-core-1.0-fcs.jar" dest="${build}"/> -->
    <unjar src="${build_src}/junit/junit${junit.version}/junit.jar" dest="${build}"/>
<!--
    <unjar src="${pmd-top}/lib/saxpath-1.0-fcs.jar" dest="${build}">
      <patternset>
        <include name="org/saxpath/**/*.class"/>
        <include name="com/werken/**/*.class"/>
      </patternset>
    </unjar> 
-->
    <!-- Install the test data -->
    <zip basedir="${data}"
           includes="pmd/**"
           destfile="${zipdata}/pmd.zip"/>

          <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}"
                 includes="dacapo/pmd/*"/>
  </target>



  <!-- ================================= 
          target: ps              
         ================================= -->
  <target name="ps" depends="harness" description="--> Build the ps benchmark">
    <property name="ps-top" location="${build_src}/ps"/>
    <mkdir dir="${ps-top}/ps"/>

    <!-- untar the source distribution -->
    <untar src="${sources}/ps.tgz" dest="${ps-top}/ps" compression="gzip"/>

    <!-- Apply the dacapo patch -->
    <patch patchfile="${patches}/ps.patch" 
                 dir="${ps-top}/ps"
                 strip="0" ignorewhitespace="yes"/>

    <!-- Build using Javac -->
    <javac srcdir="${ps-top}/ps" classpath="${build}"
             destdir="${build}"/>

    <javac srcdir="${bmsrc}" classpath="${build}"
               destdir="${build}"
                 includes="dacapo/ps/*"/>

    <!-- Install the test data -->
    <zip basedir="${data}"
           includes="ps/**"
           destfile="${zipdata}/ps.zip"/>

          <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}"
                 includes="dacapo/ps/*"/>
  </target>

  <!-- ================================= 
        target: xalan-241 
       ================================= -->
  <target name="xalan-241" description="Build xalan" depends="harness,xerces">
    <property name="xalan-top" value="${build_src}/xalan/"/>
    <property name="xalan-v" value="2_4_1"/>
    <mkdir dir="${xalan-top}"/>

    <!-- Unpack the source distribution -->
<!--    <untar src="${sources}/xalan-j_${xalan-v}-src.tar.gz" 
           dest="${xalan-top}" compression="gzip"/>
-->
    <!-- Build using the supplied build.xml -->
    <ant antfile="${xalan-top}/xalan-j_${xalan-v}/build.xml" dir="${xalan-top}/xalan-j_${xalan-v}" 
         inheritall="false"/>

    <!-- Grap the xalan class files from the built jar files -->
    <unjar src="${xalan-top}/xalan-j_${xalan-v}/build/xalan.jar" dest="${build}"/>
    <!-- Only required for xalan ${xalan.version} (which doesn't work with classpath 0.18)
     <unjar src="${xalan-top}/xalan-j_${xalan-v}/build/serializer.jar" dest="${build}"/> -->

    <!-- Install the test data -->
    <zip basedir="${data}"
           includes="xalan/**"
           destfile="${zipdata}/xalan.zip"/>

          <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}"
                 includes="dacapo/xalan/*"/>
  </target>

  <!-- ================================= 
        target: xalan
       ================================= -->
  <target name="xalan" description="Build xalan" depends="harness,xerces">
    <property name="xalan-top" value="${build_src}/xalan/"/>
    <property name="xalan-v" value="${xalan.version}"/>
    <mkdir dir="${xalan-top}"/>

    <!-- Unpack the source distribution -->
    <untar src="${sources}/xalan-j_${xalan-v}-src.tar.gz" 
           dest="${xalan-top}" compression="gzip"/>

    <!-- Build using the supplied build.xml -->
    <ant antfile="${xalan-top}/xalan-j_${xalan-v}/build.xml" dir="${xalan-top}/xalan-j_${xalan-v}" 
         inheritall="false"/>

    <!-- Grap the xalan class files from the built jar files -->
    <unjar src="${xalan-top}/xalan-j_${xalan-v}/build/xalan.jar" dest="${build}"/>
    <!-- Only required for xalan ${xalan.version} (which doesn't work with classpath 0.18) -->
     <unjar src="${xalan-top}/xalan-j_${xalan-v}/build/serializer.jar" dest="${build}"/> 

    <!-- Install the test data -->
    <zip basedir="${data}"
           includes="xalan/**"
           destfile="${zipdata}/xalan.zip"/>

          <javac srcdir="${bmsrc}" classpath="${build}" destdir="${build}"
                 includes="dacapo/xalan/*"/>
  </target>


  <!-- ================================= 
        target: xerces 

  Not a benchmark in its own right, but a library that several of
  the benchmarks rely on.
       ================================= -->
  <target name="xerces" description="Build xerces">
    <property name="xerces-top" value="${build_src}/xerces/"/>
    <mkdir dir="${xerces-top}"/>

    <!-- Unpack the source distribution -->
    <untar src="${sources}/Xerces-J-bin.${xerces.version}.tar.gz" 
           dest="${xerces-top}" compression="gzip"/>

    <unjar src="${xerces-top}/xerces-2_6_2/xercesImpl.jar" dest="${build}"/>
    <unjar src="${xerces-top}/xerces-2_6_2/xml-apis.jar" dest="${build}"/>
  </target>
</project>
